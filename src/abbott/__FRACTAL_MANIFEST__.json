{
  "args_schema_version": "pydantic_v1",
  "has_args_schema": true,
  "has_args_schemas": true,
  "manifest_version": "1",
  "task_list": [
    {
      "args_schema": {
        "title": "ComputeRegistrationElastix",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata. `coarsening_xy (int)`: coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "wavelength_id": {
            "title": "Wavelength Id",
            "type": "string",
            "description": "Wavelength that will be used for image-based registration; e.g. `A01_C01` for Yokogawa, `C01` for MD."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well (usually the first cycle that was provided)."
          },
          "level": {
            "title": "Level",
            "default": 2,
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "wavelength_id"
        ],
        "additionalProperties": false
      },
      "executable": "fractal_tasks/compute_registration_elastix.py",
      "input_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "name": "Compute Registration Elastix",
      "output_type": "zarr",
      "docs_info": "Calculate registration based on images.\n\nThis task consists of 3 parts:\n\n1. Loading the images of a given ROI (=> loop over ROIs)\n2. Calculating the transformation for that ROI\n3. Storing the calculated transformation in the ROI table\n\nParallelization level: image",
      "docs_link": "https://github.com/MaksHess/abbott"
    }
  ]
}
